[agent1]
type = simulated_robot
data_type = numpy
start_state = [0.0, 0.0, 0.0, 0.0, 5.0]
cost_evaluator = my_cost_evaluator1
dynamics = my_dynamics1
steps_per_action = 1
controller = my_controller1

[logger]
type = MPPI_logger
experiment_name = MPPI_exp_1

[my_controller1]
type = MPPI
dynamics = my_dynamics1
cost_evaluator = my_cost_evaluator1
control_dim = 2
inverse_temperature = 1
control_horizon = 10
stochastic_trajectories_sampler = my_stochastic_trajectories_sampler1

[my_stochastic_trajectories_sampler1]
#type = MPPI_stochastic_trajectories_sampler
type = MPPI_stochastic_trajectories_sampler_slow_loop
# type = MPPI_parallel_stochastic_trajectories_sampler_multiprocessing
number_of_trajectories = 100
uncontrolled_trajectories_portion = 0.0
noise_sampler = my_noise_sampler1

[my_noise_sampler1]
type = gaussian_noise_sampler
mean = [0, 0]
covariance = [[10, 0], [0, 10]]


[my_dynamics1]
type = bicycle_dynamics
mass = 1.0
cog_pos = 0.5
car_length = 1
delta_t = 0.1

[my_cost_evaluator1]
type = quadratic_cost
collision_cost = 1000
goal_cost = -5000
Q = [1.0, 1.0, 1.0, 1.0, 1.0]
R = [1.0, 1.0]
goal_checker = my_goal_checker1
collision_checker = my_collision_checker1

[my_goal_checker1]
type = state_space_goal_checker
goal_state = [10.0, 0.0, 0.0, 0.0, 5.0]
goal_radius = 2.0

[my_collision_checker1]
type = point_collision_checker
obstacles = [[3.0,0.0], [7.0, 0.0]]
obstacles_radius = [1.5, 1.5]
kinematics = my_kinematics1

[my_kinematics1]
type = point_kinematics
radius = 0.5

[renderer1]
type = MPPImatplotlib
xaxis_range = [-1, 20]
yaxis_range = [-15, 15]
figure_size = [9, 9]
figure_dpi = 81
auto_range = False







