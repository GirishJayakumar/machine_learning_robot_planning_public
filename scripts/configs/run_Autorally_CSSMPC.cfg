[agent1]
type = simulated_robot
data_type = numpy
start_state = [2.0, 0.0, 0.0, 20.0, 20.0, 0.0, 0.0, -2.0]
cost_evaluator = my_cost_evaluator1
dynamics = sim_dynamics1
steps_per_action = 1
controller = my_controller1

[logger]
type = Autorally_npz_logger
experiment_name = Autorally_CSSMPC_exp1
goal_checker = my_goal_checker1
collision_checker = my_collision_checker1
batch_code = batch_000

[my_controller1]
type = CSSMPC_Autorally
dynamics = ctrl_dynamics1
dynamics_linearizer = my_dynamics_linearizer
cost_evaluator = my_cost_evaluator1
control_dim = 2
control_horizon = 5
stochastic_trajectories_sampler = my_stochastic_trajectories_sampler1
initial_control_sequence = [0.0, 0.3]
goal_state = [5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
goal_terminal_state = [2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
ctrl_range = [[-1.0, 1.0], [0.1, 1.0]]
ctrl_slew_rate = [[-0.4, 0.4], [-0.1, 0.1]]
prob_lvl = 0.8
load_k = 0
track_w = 4.0
Q = [3.0, 3.0, 0.1, 0.0, 0.0, 10.0, 20.0, 0.0]
QN = [30.0, 1000.0, 0.0, 0.0, 0.0, 1000.0, 2000.0, 0.0]
R = [10.0, 5.0]

[my_dynamics_linearizer]
dynamics = ctrl_dynamics1
type = numpy_dynamics_linearizer
delta_x = [0.01, 0.001, 0.01, 0.1, 0.1, 0.05, 0.1, 0.2]
delta_u = [0.001, 0.01]

[ctrl_dynamics1]
type = autorally_dynamics_map
delta_t = 0.20
m = 21.7562
Iz = 1.124
lF = 0.34
lFR = 0.57
IwF = 0.1
IwR = 0.0373
rF = 0.095
rR = 0.090
h = 0.12
tire_B = 4.0
tire_C = 1.0
tire_D = 1.0
kSteering = -0.24
cSteering = -0.02
throttle_factor = 0.45
friction_nn_path = ''
throttle_nn_path = environment/dynamics/autorally_dynamics/throttle_model1.pth
track_path = environment/dynamics/autorally_dynamics/ccrf_track_optimal.npz
throttle_nn_file_name = throttle_model1.pth
track_file_name = ccrf_track_optimal.npz

[sim_dynamics1]
type = autorally_dynamics_cartesian
delta_t = 0.20
m = 21.7562
Iz = 1.124
lF = 0.34
lFR = 0.57
IwF = 0.1
IwR = 0.0373
rF = 0.095
rR = 0.090
h = 0.12
tire_B = 4.0
tire_C = 1.0
tire_D = 1.0
kSteering = -0.24
cSteering = -0.02
throttle_factor = 0.45
friction_nn_path = ''
throttle_nn_path = environment/dynamics/autorally_dynamics/throttle_model1.pth
track_path = environment/dynamics/autorally_dynamics/ccrf_track_optimal.npz
throttle_nn_file_name = throttle_model1.pth
track_file_name = ccrf_track_optimal.npz
hybrid_nn = hybrid_net_ar2.pth
carsim_simfile = carsim_simfile.sim
carsim_dll = vs_solvers/Linux/CarSim/lib64/libcarsim.so.2020.1

[my_cost_evaluator1]
type = quadratic_cost
collision_cost = 1000
goal_cost = -5000
Q = [3.0, 3.0, 0.1, 0.0, 0.0, 10.0, 20.0, 0.0]
QN = [30.0, 1000.0, 0.0, 0.0, 0.0, 1000.0, 2000.0, 0.0]
R = [10.0, 5.0]
goal_checker = my_goal_checker1
collision_checker = my_collision_checker1

[my_goal_checker1]
type = autorally_cartesian_goal_checker
goal_state = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.0, -3.0]
goal_radius = 2.0

[my_collision_checker1]
type = autorally_collision_checker
track_width = 1.5
obstacles = [[3.0,0.0], [7.0, 0.0]]
obstacles_radius = [0.0, 0.0]
kinematics = my_kinematics1

[my_kinematics1]
type = point_kinematics
radius = 0.5

[renderer1]
type = autorally_matplotlib
xaxis_range = [-20, 40]
yaxis_range = [-50, 10]
figure_size = [9, 9]
figure_dpi = 81
auto_range = False
map_path = environment/dynamics/autorally_dynamics/CCRF_2021-01-10.npz
map_file = CCRF_2021-01-10.npz
path_rendering = True
