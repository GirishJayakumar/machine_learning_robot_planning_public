[environment]
agent_names = ['agent1', 'agent2']
renderer = my_renderer
steps_per_action = 1

[my_renderer]
type = Envmatplotlib
xaxis_range = [-20, 20]
yaxis_range = [-20, 20]
figure_size = [9, 9]
figure_dpi = 81
auto_range = False

[agent1]
type = simulated_robot
data_type = numpy
start_state = [-12.0, -5.0, 0.0, 0.0]
cost_evaluator = my_cost_evaluator1
dynamics = my_dynamics1
observer = my_observer1
steps_per_action = 1

[my_dynamics1]
type = point_dynamics
mass = 1.0
delta_t = 0.1
max_vx = 2
max_vy = 2
max_x = 20
max_y = 20

[my_cost_evaluator1]
type = terminal_cost
dense = False
collision_cost = 5000
goal_cost = -5000
goal_checker = my_goal_checker1
collision_checker = my_collision_checker1

[my_goal_checker1]
type = position_goal_checker
goal_state = [12.0, 0.0]
goal_radius = 1.5

[my_collision_checker1]
type = point_collision_checker
obstacles = [[-5.0, 0.0], [5.0, 0.0], [0.0, 6.0], [0.0, -6.0], [-15.0, -15.0], [10.0, -15.0], [-10.0, 15.0], [10.0, 15.0]]
obstacles_radius = [2.0, 2.0, 2.0, 3.0, 6.0, 5.0, 4.0, 6.0]
kinematics = my_kinematics1
field_boundary = [20, 20]

[my_kinematics1]
type = point_kinematics
radius = 1

[my_observer1]
type = full_state_observer


[agent2]
type = simulated_robot
data_type = numpy
start_state = [15.0, 3.0, 0.0, 0.0]
cost_evaluator = my_cost_evaluator2
dynamics = my_dynamics2
observer = my_observer2
steps_per_action = 1

[my_dynamics2]
type = point_dynamics
mass = 1.0
delta_t = 0.1
max_vx = 2
max_vy = 2
max_x = 20
max_y = 20

[my_cost_evaluator2]
type = terminal_cost
dense = False
collision_cost = 5000
goal_cost = -5000
goal_checker = my_goal_checker2
collision_checker = my_collision_checker2

[my_goal_checker2]
type = position_goal_checker
goal_state = [-12.0, 0.0]
goal_radius = 1.5

[my_collision_checker2]
type = point_collision_checker
obstacles = [[-5.0, 0.0], [5.0, 0.0], [0.0, 6.0], [0.0, -6.0], [-15.0, -15.0], [10.0, -15.0], [-10.0, 15.0], [10.0, 15.0]]
obstacles_radius = [2.0, 2.0, 2.0, 3.0, 6.0, 5.0, 4.0, 6.0]
kinematics = my_kinematics2
field_boundary = [20, 20]

[my_kinematics2]
type = point_kinematics
radius = 1

[my_observer2]
type = full_state_observer












